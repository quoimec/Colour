//
//  StyleKitahasdasd.swift
//
//  Created on Mar 17, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKitahasdasd: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawLEDTop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Combined Shape
        let combinedShape = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 128))
        context.saveGState()
        context.translateBy(x: 57, y: 10)
        UIColor(hue: 1, saturation: 0.913, brightness: 1, alpha: 1).setFill()
        combinedShape.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawLEDBase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 54, y: 116)
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 3, y: 0))
            combinedShape.addLine(to: CGPoint(x: 55, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 58, y: 3), controlPoint1: CGPoint(x: 56.66, y: 0), controlPoint2: CGPoint(x: 58, y: 1.34))
            combinedShape.addLine(to: CGPoint(x: 58, y: 9))
            combinedShape.addLine(to: CGPoint(x: 58, y: 9))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 12), controlPoint1: CGPoint(x: 58, y: 10.66), controlPoint2: CGPoint(x: 56.66, y: 12))
            combinedShape.addLine(to: CGPoint(x: 3, y: 12))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 1.34, y: 12), controlPoint2: CGPoint(x: 0, y: 10.66))
            combinedShape.addLine(to: CGPoint(x: 0, y: 3))
            combinedShape.addLine(to: CGPoint(x: 0, y: 3))
            combinedShape.addCurve(to: CGPoint(x: 3, y: 0), controlPoint1: CGPoint(x: 0, y: 1.34), controlPoint2: CGPoint(x: 1.34, y: 0))
            combinedShape.addLine(to: CGPoint(x: 3, y: 0))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 6, y: 12))
            combinedShape.addLine(to: CGPoint(x: 18, y: 12))
            combinedShape.addLine(to: CGPoint(x: 18, y: 25))
            combinedShape.addLine(to: CGPoint(x: 6, y: 25))
            combinedShape.addLine(to: CGPoint(x: 6, y: 12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 40, y: 12))
            combinedShape.addLine(to: CGPoint(x: 52, y: 12))
            combinedShape.addLine(to: CGPoint(x: 52, y: 25))
            combinedShape.addLine(to: CGPoint(x: 40, y: 25))
            combinedShape.addLine(to: CGPoint(x: 40, y: 12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 40, y: 12))
            context.saveGState()
            context.translateBy(x: 16, y: 0)
            combinedShape.usesEvenOddFillRule = true
            UIColor(white: 0.19, alpha: 0.54).setFill()
            combinedShape.fill()
            context.restoreGState()
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 92, height: 9))
            context.saveGState()
            context.translateBy(x: 0, y: 16)
            UIColor(white: 0.238, alpha: 1).setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12, height: 50))
            context.saveGState()
            context.translateBy(x: 22, y: 25)
            UIColor(white: 0.823, alpha: 1).setFill()
            rectangle3.fill()
            context.restoreGState()
            
            /// Rectangle 3
            let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12, height: 50))
            context.saveGState()
            context.translateBy(x: 56, y: 25)
            UIColor(white: 0.823, alpha: 1).setFill()
            rectangle12.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfLEDTop() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        StyleKitahasdasd.drawLEDTop()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLEDBase() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 200, height: 200), false, 0)
        StyleKitahasdasd.drawLEDBase()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
